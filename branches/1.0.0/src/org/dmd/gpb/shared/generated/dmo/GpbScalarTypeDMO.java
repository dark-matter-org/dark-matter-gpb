//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2014 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.gpb.shared.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:396)
import java.io.Serializable;                                        // Always required - (GenUtility.java:224)
import org.dmd.dmc.DmcAttribute;                                    // Named object - (GenUtility.java:376)
import org.dmd.dmc.DmcNamedObjectIF;                                // Named object - (GenUtility.java:375)
import org.dmd.dmc.DmcSliceInfo;                                    // Required for object slicing - (GenUtility.java:229)
import org.dmd.dmc.DmcValueException;                               // Any attributes - (GenUtility.java:241)
import org.dmd.dmc.types.DefinitionName;                            // Naming attribute type - (GenUtility.java:370)
import org.dmd.dms.generated.dmo.MetaDMSAG;                         // Required for MODREC constructor - (GenUtility.java:228)
import org.dmd.dms.generated.types.DmcTypeDefinitionNameSV;         // Required type - (GenUtility.java:328)
import org.dmd.dms.generated.types.DmcTypeIntegerSV;                // Required type - (GenUtility.java:328)
import org.dmd.dms.generated.types.DmcTypeModifierMV;               // Required for MODREC constructor - (GenUtility.java:227)
import org.dmd.dms.generated.types.DmcTypeStringSV;                 // Required type - (GenUtility.java:328)
import org.dmd.gpb.shared.generated.dmo.GpbTypeDMO;                 // Base class - (GenUtility.java:355)

// Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:678)
/**
 * The GpbType class is use to define the types of attributes in the GPB\n
 * specification. All GpbMessages and GpbEnum will have GpbTypes generated
 * for\n them so that they can be used as types for GpbAttributes.\n <p/>\n
 * GpbType definitions cannot be specified in .dmgpb files; they are strictly
 * for\n internal use. If you specify one in a .dmgpb file, you'll get an
 * error.
 * <P>
 * Generated from the dmdgpb schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:134)
 */
@SuppressWarnings("serial")
public class GpbScalarTypeDMO  extends GpbTypeDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "GpbScalarType";


    static {
    }

    public GpbScalarTypeDMO() {
        super("GpbScalarType");
    }

    protected GpbScalarTypeDMO(String oc) {
        super(oc);
    }

    @Override
    public GpbScalarTypeDMO getNew(){
        GpbScalarTypeDMO rc = new GpbScalarTypeDMO();
        return(rc);
    }

    @Override
    public GpbScalarTypeDMO getSlice(DmcSliceInfo info){
        GpbScalarTypeDMO rc = new GpbScalarTypeDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public GpbScalarTypeDMO(DmcTypeModifierMV mods) {
        super("GpbScalarType");
        modrec(true);
        setModifier(mods);
    }

    public GpbScalarTypeDMO getModificationRecorder(){
        GpbScalarTypeDMO rc = new GpbScalarTypeDMO();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:752)
    public DefinitionName getObjectName(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null)
            return((DefinitionName)name.getSV());
    
        return(null);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:769)
    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return(name);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:776)
    public boolean equals(Object obj){
        if (obj instanceof GpbScalarTypeDMO){
            return( getObjectName().equals( ((GpbScalarTypeDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:784)
    public int hashCode(){
        DefinitionName objn = getObjectName();
        if (objn == null)
            return(0);
        
        return(objn.hashCode());
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public String getDefaultValue(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmdgpbDMSAG.__defaultValue);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets defaultValue to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setDefaultValue(String value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__defaultValue);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__defaultValue);
        
        try{
            attr.set(value);
            set(DmdgpbDMSAG.__defaultValue,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets defaultValue to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setDefaultValue(Object value) throws DmcValueException {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmdgpbDMSAG.__defaultValue);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__defaultValue);
        
        attr.set(value);
        set(DmdgpbDMSAG.__defaultValue,attr);
    }

    /**
     * Removes the defaultValue attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remDefaultValue(){
         rem(DmdgpbDMSAG.__defaultValue);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public Integer getSizeInBytes(){
        DmcTypeIntegerSV attr = (DmcTypeIntegerSV) get(DmdgpbDMSAG.__sizeInBytes);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets sizeInBytes to the specified value.
     * @param value Integer
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setSizeInBytes(Integer value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__sizeInBytes);
        if (attr == null)
            attr = new DmcTypeIntegerSV(DmdgpbDMSAG.__sizeInBytes);
        
        try{
            attr.set(value);
            set(DmdgpbDMSAG.__sizeInBytes,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets sizeInBytes to the specified value.
     * @param value A value compatible with DmcTypeIntegerSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setSizeInBytes(Object value) throws DmcValueException {
        DmcTypeIntegerSV attr  = (DmcTypeIntegerSV) get(DmdgpbDMSAG.__sizeInBytes);
        if (attr == null)
            attr = new DmcTypeIntegerSV(DmdgpbDMSAG.__sizeInBytes);
        
        attr.set(value);
        set(DmdgpbDMSAG.__sizeInBytes,attr);
    }

    /**
     * Removes the sizeInBytes attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remSizeInBytes(){
         rem(DmdgpbDMSAG.__sizeInBytes);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public String getJavaType(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmdgpbDMSAG.__javaType);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets javaType to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setJavaType(String value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__javaType);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__javaType);
        
        try{
            attr.set(value);
            set(DmdgpbDMSAG.__javaType,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets javaType to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setJavaType(Object value) throws DmcValueException {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmdgpbDMSAG.__javaType);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__javaType);
        
        attr.set(value);
        set(DmdgpbDMSAG.__javaType,attr);
    }

    /**
     * Removes the javaType attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remJavaType(){
         rem(DmdgpbDMSAG.__javaType);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public String getCplusplusType(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmdgpbDMSAG.__cplusplusType);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets cplusplusType to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setCplusplusType(String value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__cplusplusType);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__cplusplusType);
        
        try{
            attr.set(value);
            set(DmdgpbDMSAG.__cplusplusType,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets cplusplusType to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setCplusplusType(Object value) throws DmcValueException {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmdgpbDMSAG.__cplusplusType);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__cplusplusType);
        
        attr.set(value);
        set(DmdgpbDMSAG.__cplusplusType,attr);
    }

    /**
     * Removes the cplusplusType attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remCplusplusType(){
         rem(DmdgpbDMSAG.__cplusplusType);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public String getPythonType(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmdgpbDMSAG.__pythonType);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets pythonType to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setPythonType(String value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__pythonType);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__pythonType);
        
        try{
            attr.set(value);
            set(DmdgpbDMSAG.__pythonType,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets pythonType to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setPythonType(Object value) throws DmcValueException {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmdgpbDMSAG.__pythonType);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__pythonType);
        
        attr.set(value);
        set(DmdgpbDMSAG.__pythonType,attr);
    }

    /**
     * Removes the pythonType attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remPythonType(){
         rem(DmdgpbDMSAG.__pythonType);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public DefinitionName getName(){
        DmcTypeDefinitionNameSV attr = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setName(DefinitionName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setName(Object value) throws DmcValueException {
        DmcTypeDefinitionNameSV attr  = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remName(){
         rem(MetaDMSAG.__name);
    }




}
