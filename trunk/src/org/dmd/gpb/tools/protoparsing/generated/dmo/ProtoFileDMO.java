//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2014 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.gpb.tools.protoparsing.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:396)
import java.io.Serializable;                                                                // Always required - (GenUtility.java:224)
import java.util.*;                                                                         // Always required if we have any MV attributes - (GenUtility.java:221)
import org.dmd.dmc.DmcAttribute;                                                            // Named object - (GenUtility.java:376)
import org.dmd.dmc.DmcNamedObjectIF;                                                        // Named object - (GenUtility.java:375)
import org.dmd.dmc.DmcOmni;                                                                 // Lazy resolution - (GenUtility.java:320)
import org.dmd.dmc.DmcSliceInfo;                                                            // Required for object slicing - (GenUtility.java:229)
import org.dmd.dmc.DmcValueException;                                                       // Any attributes - (GenUtility.java:241)
import org.dmd.dmc.types.DefinitionName;                                                    // Naming attribute type - (GenUtility.java:370)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                                 // Required for MODREC constructor - (GenUtility.java:228)
import org.dmd.dms.generated.types.DmcTypeDefinitionNameSV;                                 // Required type - (GenUtility.java:328)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                       // Required for MODREC constructor - (GenUtility.java:227)
import org.dmd.dms.generated.types.DmcTypeStringMV;                                         // Required type - (GenUtility.java:328)
import org.dmd.dms.generated.types.DmcTypeStringSV;                                         // Required type - (GenUtility.java:328)
import org.dmd.gpb.tools.protoparsing.generated.dmo.ProtoDefinitionDMO;                     // Base class - (GenUtility.java:355)
import org.dmd.gpb.tools.protoparsing.generated.dmo.ProtoFieldDMO;                          // Type specific set/add - (GenUtility.java:307)
import org.dmd.gpb.tools.protoparsing.generated.dmo.ProtoMainElementDMO;                    // Type specific set/add - (GenUtility.java:307)
import org.dmd.gpb.tools.protoparsing.generated.types.DmcTypeProtoFieldREFMV;               // Reference type - (GenUtility.java:300)
import org.dmd.gpb.tools.protoparsing.generated.types.DmcTypeProtoMainElementREFMV;         // Reference type - (GenUtility.java:300)
import org.dmd.gpb.tools.protoparsing.generated.types.ProtoFieldREF;                        // Helper class - (GenUtility.java:335)
import org.dmd.gpb.tools.protoparsing.generated.types.ProtoMainElementREF;                  // Helper class - (GenUtility.java:335)

// Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:678)
/**
 * The ProtoFile is used to represent a single .proto file. It may be
 * parsed\n from an existing .proto file by the GpbDotProtoParser utility.
 * <P>
 * Generated from the dmdproto schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:134)
 */
@SuppressWarnings("serial")
public class ProtoFileDMO  extends ProtoDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "ProtoFile";


    static {
    }

    public ProtoFileDMO() {
        super("ProtoFile");
    }

    protected ProtoFileDMO(String oc) {
        super(oc);
    }

    @Override
    public ProtoFileDMO getNew(){
        ProtoFileDMO rc = new ProtoFileDMO();
        return(rc);
    }

    @Override
    public ProtoFileDMO getSlice(DmcSliceInfo info){
        ProtoFileDMO rc = new ProtoFileDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public ProtoFileDMO(DmcTypeModifierMV mods) {
        super("ProtoFile");
        modrec(true);
        setModifier(mods);
    }

    public ProtoFileDMO getModificationRecorder(){
        ProtoFileDMO rc = new ProtoFileDMO();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:752)
    public DefinitionName getObjectName(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null)
            return((DefinitionName)name.getSV());
    
        return(null);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:769)
    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return(name);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:776)
    public boolean equals(Object obj){
        if (obj instanceof ProtoFileDMO){
            return( getObjectName().equals( ((ProtoFileDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:784)
    public int hashCode(){
        DefinitionName objn = getObjectName();
        if (objn == null)
            return(0);
        
        return(objn.hashCode());
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1112)
    public Iterator<String> getImport(){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(DmdprotoDMSAG.__import);
        if (attr == null)
            return( ((List<String>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth String value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1124)
    public String getNthImport(int i){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(DmdprotoDMSAG.__import);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another import to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1138)
    public DmcAttribute<?> addImport(String value) {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__import);
        if (attr == null)
            attr = new DmcTypeStringMV(DmdprotoDMSAG.__import);
        
        try{
            setLastValue(attr.add(value));
            add(DmdprotoDMSAG.__import,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified String.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1213)
    public boolean importContains(String value) {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__import);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another import value.
     * @param value A value compatible with String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1245)
    public DmcAttribute<?> addImport(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__import);
        if (attr == null)
            attr = new DmcTypeStringMV(DmdprotoDMSAG.__import);
        
        setLastValue(attr.add(value));
        add(DmdprotoDMSAG.__import,attr);
        return(attr);
    }

    /**
     * Returns the number of values in import
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1262)
    public int getImportSize(){
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__import);
        if (attr == null){
            if (DmdprotoDMSAG.__import.indexSize == 0)
                return(0);
            else
                return(DmdprotoDMSAG.__import.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a import value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1320)
    public DmcAttribute<?> delImport(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__import);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(DmdprotoDMSAG.__import), value);
        else
            attr = del(DmdprotoDMSAG.__import, value);
        
        return(attr);
    }

    /**
     * Deletes a import from the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1336)
    public DmcAttribute<?> delImport(String value) {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__import);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(DmdprotoDMSAG.__import), value);
        else
            attr = del(DmdprotoDMSAG.__import, value);
        
        return(attr);
    }

    /**
     * Removes the import attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1355)
    public void remImport(){
         rem(DmdprotoDMSAG.__import);
    }

    /**
     * @return An Iterator of ProtoMainElementDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:970)
    public Iterator<ProtoMainElementREF> getMainElements(){
        DmcTypeProtoMainElementREFMV attr = (DmcTypeProtoMainElementREFMV) get(DmdprotoDMSAG.__mainElements);
        if (attr == null)
            return( ((List<ProtoMainElementREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<ProtoMainElementREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of ProtoMainElementREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:990)
    public Iterator<ProtoMainElementREF> getMainElementsREFs(){
        DmcTypeProtoMainElementREFMV attr = (DmcTypeProtoMainElementREFMV) get(DmdprotoDMSAG.__mainElements);
        if (attr == null)
            return( ((List<ProtoMainElementREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another mainElements to the specified value.
     * @param value ProtoMainElement
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1004)
    public DmcAttribute<?> addMainElements(ProtoMainElementDMO value) {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__mainElements);
        if (attr == null)
            attr = new DmcTypeProtoMainElementREFMV(DmdprotoDMSAG.__mainElements);
        
        try{
            setLastValue(attr.add(value));
            add(DmdprotoDMSAG.__mainElements,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another mainElements value.
     * @param value A value compatible with ProtoMainElement
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1245)
    public DmcAttribute<?> addMainElements(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__mainElements);
        if (attr == null)
            attr = new DmcTypeProtoMainElementREFMV(DmdprotoDMSAG.__mainElements);
        
        setLastValue(attr.add(value));
        add(DmdprotoDMSAG.__mainElements,attr);
        return(attr);
    }

    /**
     * Returns the number of values in mainElements
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1262)
    public int getMainElementsSize(){
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__mainElements);
        if (attr == null){
            if (DmdprotoDMSAG.__mainElements.indexSize == 0)
                return(0);
            else
                return(DmdprotoDMSAG.__mainElements.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a mainElements value.
     * @param value The ProtoMainElement to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1301)
    public DmcAttribute<?> delMainElements(Object value){
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__mainElements);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeProtoMainElementREFMV(DmdprotoDMSAG.__mainElements), value);
        else
            attr = del(DmdprotoDMSAG.__mainElements, value);
        
        return(attr);
    }

    /**
     * Removes the mainElements attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1355)
    public void remMainElements(){
         rem(DmdprotoDMSAG.__mainElements);
    }

    /**
     * @return An Iterator of ProtoMainElementDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:970)
    public Iterator<ProtoMainElementREF> getEmbeddedElements(){
        DmcTypeProtoMainElementREFMV attr = (DmcTypeProtoMainElementREFMV) get(DmdprotoDMSAG.__embeddedElements);
        if (attr == null)
            return( ((List<ProtoMainElementREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<ProtoMainElementREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of ProtoMainElementREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:990)
    public Iterator<ProtoMainElementREF> getEmbeddedElementsREFs(){
        DmcTypeProtoMainElementREFMV attr = (DmcTypeProtoMainElementREFMV) get(DmdprotoDMSAG.__embeddedElements);
        if (attr == null)
            return( ((List<ProtoMainElementREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another embeddedElements to the specified value.
     * @param value ProtoMainElement
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1004)
    public DmcAttribute<?> addEmbeddedElements(ProtoMainElementDMO value) {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__embeddedElements);
        if (attr == null)
            attr = new DmcTypeProtoMainElementREFMV(DmdprotoDMSAG.__embeddedElements);
        
        try{
            setLastValue(attr.add(value));
            add(DmdprotoDMSAG.__embeddedElements,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another embeddedElements value.
     * @param value A value compatible with ProtoMainElement
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1245)
    public DmcAttribute<?> addEmbeddedElements(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__embeddedElements);
        if (attr == null)
            attr = new DmcTypeProtoMainElementREFMV(DmdprotoDMSAG.__embeddedElements);
        
        setLastValue(attr.add(value));
        add(DmdprotoDMSAG.__embeddedElements,attr);
        return(attr);
    }

    /**
     * Returns the number of values in embeddedElements
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1262)
    public int getEmbeddedElementsSize(){
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__embeddedElements);
        if (attr == null){
            if (DmdprotoDMSAG.__embeddedElements.indexSize == 0)
                return(0);
            else
                return(DmdprotoDMSAG.__embeddedElements.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a embeddedElements value.
     * @param value The ProtoMainElement to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1301)
    public DmcAttribute<?> delEmbeddedElements(Object value){
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__embeddedElements);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeProtoMainElementREFMV(DmdprotoDMSAG.__embeddedElements), value);
        else
            attr = del(DmdprotoDMSAG.__embeddedElements, value);
        
        return(attr);
    }

    /**
     * Removes the embeddedElements attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1355)
    public void remEmbeddedElements(){
         rem(DmdprotoDMSAG.__embeddedElements);
    }

    /**
     * @return An Iterator of ProtoFieldDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:970)
    public Iterator<ProtoFieldREF> getFields(){
        DmcTypeProtoFieldREFMV attr = (DmcTypeProtoFieldREFMV) get(DmdprotoDMSAG.__fields);
        if (attr == null)
            return( ((List<ProtoFieldREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<ProtoFieldREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of ProtoFieldREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:990)
    public Iterator<ProtoFieldREF> getFieldsREFs(){
        DmcTypeProtoFieldREFMV attr = (DmcTypeProtoFieldREFMV) get(DmdprotoDMSAG.__fields);
        if (attr == null)
            return( ((List<ProtoFieldREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another fields to the specified value.
     * @param value ProtoField
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1004)
    public DmcAttribute<?> addFields(ProtoFieldDMO value) {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__fields);
        if (attr == null)
            attr = new DmcTypeProtoFieldREFMV(DmdprotoDMSAG.__fields);
        
        try{
            setLastValue(attr.add(value));
            add(DmdprotoDMSAG.__fields,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another fields value.
     * @param value A value compatible with ProtoField
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1245)
    public DmcAttribute<?> addFields(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__fields);
        if (attr == null)
            attr = new DmcTypeProtoFieldREFMV(DmdprotoDMSAG.__fields);
        
        setLastValue(attr.add(value));
        add(DmdprotoDMSAG.__fields,attr);
        return(attr);
    }

    /**
     * Returns the number of values in fields
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1262)
    public int getFieldsSize(){
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__fields);
        if (attr == null){
            if (DmdprotoDMSAG.__fields.indexSize == 0)
                return(0);
            else
                return(DmdprotoDMSAG.__fields.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a fields value.
     * @param value The ProtoField to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1301)
    public DmcAttribute<?> delFields(Object value){
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__fields);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeProtoFieldREFMV(DmdprotoDMSAG.__fields), value);
        else
            attr = del(DmdprotoDMSAG.__fields, value);
        
        return(attr);
    }

    /**
     * Removes the fields attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1355)
    public void remFields(){
         rem(DmdprotoDMSAG.__fields);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public String getGeneratedFileName(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmdprotoDMSAG.__generatedFileName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets generatedFileName to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setGeneratedFileName(String value) {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__generatedFileName);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdprotoDMSAG.__generatedFileName);
        
        try{
            attr.set(value);
            set(DmdprotoDMSAG.__generatedFileName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets generatedFileName to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setGeneratedFileName(Object value) throws DmcValueException {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmdprotoDMSAG.__generatedFileName);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdprotoDMSAG.__generatedFileName);
        
        attr.set(value);
        set(DmdprotoDMSAG.__generatedFileName,attr);
    }

    /**
     * Removes the generatedFileName attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remGeneratedFileName(){
         rem(DmdprotoDMSAG.__generatedFileName);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public DefinitionName getName(){
        DmcTypeDefinitionNameSV attr = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setName(DefinitionName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setName(Object value) throws DmcValueException {
        DmcTypeDefinitionNameSV attr  = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remName(){
         rem(MetaDMSAG.__name);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public String getPackage(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmdprotoDMSAG.__package);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets package to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setPackage(String value) {
        DmcAttribute<?> attr = get(DmdprotoDMSAG.__package);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdprotoDMSAG.__package);
        
        try{
            attr.set(value);
            set(DmdprotoDMSAG.__package,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets package to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setPackage(Object value) throws DmcValueException {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmdprotoDMSAG.__package);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdprotoDMSAG.__package);
        
        attr.set(value);
        set(DmdprotoDMSAG.__package,attr);
    }

    /**
     * Removes the package attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remPackage(){
         rem(DmdprotoDMSAG.__package);
    }




}
