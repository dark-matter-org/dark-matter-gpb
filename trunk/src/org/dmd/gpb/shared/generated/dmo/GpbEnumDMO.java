//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2014 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.gpb.shared.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:396)
import java.io.Serializable;                                             // Always required - (GenUtility.java:224)
import java.util.*;                                                      // Always required if we have any MV attributes - (GenUtility.java:221)
import org.dmd.dmc.DmcAttribute;                                         // Named object - (GenUtility.java:376)
import org.dmd.dmc.DmcNamedObjectIF;                                     // Named object - (GenUtility.java:375)
import org.dmd.dmc.DmcSliceInfo;                                         // Required for object slicing - (GenUtility.java:229)
import org.dmd.dmc.DmcValueException;                                    // Any attributes - (GenUtility.java:241)
import org.dmd.dmc.types.DefinitionName;                                 // Naming attribute type - (GenUtility.java:370)
import org.dmd.dms.generated.dmo.MetaDMSAG;                              // Required for MODREC constructor - (GenUtility.java:228)
import org.dmd.dms.generated.types.DmcTypeDefinitionNameSV;              // Required type - (GenUtility.java:328)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                    // Required for MODREC constructor - (GenUtility.java:227)
import org.dmd.dms.generated.types.DmcTypeStringSV;                      // Required type - (GenUtility.java:328)
import org.dmd.gpb.shared.generated.dmo.GpbCompositeTypeDMO;             // Base class - (GenUtility.java:355)
import org.dmd.gpb.shared.generated.types.DmcTypeGpbEnumValueMV;         // Required type - (GenUtility.java:328)
import org.dmd.gpb.shared.generated.types.GpbEnumValue;                  // Primitive type and !auxiliary class - (GenUtility.java:271)

// Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:677)
/**
 * The GpbEnum allows for the definition of enumerations. One thing to be
 * aware\n of with enums is that, if you're generating C++, the names of enum
 * elements must be globally\n unique. The dark-matter GPB utility will warn
 * you if you have clashing enum value names.\n <p/>\n May want to allow for
 * mapping between DMS enum definitions and GpbEnums. Provide a basedOnEnum\n
 * attribute that refers to a DMS enum. A GpbDefinitionSet could use the
 * schemaToLoad attribute\n to specify a DMS schema from which definitions
 * can be pulled.\n <p/>\n When you're defining a message type, you might
 * want one of its fields to only have one of a\n pre-defined list of values.
 * For example, let's say you want to add a corpus field for each\n
 * SearchRequest, where the corpus can be UNIVERSAL, WEB, IMAGES, LOCAL,
 * NEWS, PRODUCTS or VIDEO.\n You can do this very simply by adding an enum
 * to your message definition - a field with an enum\n type can only have one
 * of a specified set of constants as its value (if you try to provide a\n
 * different value, the parser will treat it like an unknown field). In the
 * following\n example we've added an enum called Corpus with all the
 * possible values, and a field of type Corpus:
 * <P>
 * Generated from the dmdgpb schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class GpbEnumDMO  extends GpbCompositeTypeDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "GpbEnum";


    static {
    }

    public GpbEnumDMO() {
        super("GpbEnum");
    }

    protected GpbEnumDMO(String oc) {
        super(oc);
    }

    @Override
    public GpbEnumDMO getNew(){
        GpbEnumDMO rc = new GpbEnumDMO();
        return(rc);
    }

    @Override
    public GpbEnumDMO getSlice(DmcSliceInfo info){
        GpbEnumDMO rc = new GpbEnumDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public GpbEnumDMO(DmcTypeModifierMV mods) {
        super("GpbEnum");
        modrec(true);
        setModifier(mods);
    }

    public GpbEnumDMO getModificationRecorder(){
        GpbEnumDMO rc = new GpbEnumDMO();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:751)
    public DefinitionName getObjectName(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null)
            return((DefinitionName)name.getSV());
    
        return(null);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:768)
    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return(name);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:775)
    public boolean equals(Object obj){
        if (obj instanceof GpbEnumDMO){
            return( getObjectName().equals( ((GpbEnumDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:783)
    public int hashCode(){
        DefinitionName objn = getObjectName();
        if (objn == null)
            return(0);
        
        return(objn.hashCode());
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public String getDefaultValue(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmdgpbDMSAG.__defaultValue);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets defaultValue to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setDefaultValue(String value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__defaultValue);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__defaultValue);
        
        try{
            attr.set(value);
            set(DmdgpbDMSAG.__defaultValue,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets defaultValue to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setDefaultValue(Object value) throws DmcValueException {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmdgpbDMSAG.__defaultValue);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__defaultValue);
        
        attr.set(value);
        set(DmdgpbDMSAG.__defaultValue,attr);
    }

    /**
     * Removes the defaultValue attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remDefaultValue(){
         rem(DmdgpbDMSAG.__defaultValue);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:784)
    public DefinitionName getName(){
        DmcTypeDefinitionNameSV attr = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:824)
    public void setName(DefinitionName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:877)
    public void setName(Object value) throws DmcValueException {
        DmcTypeDefinitionNameSV attr  = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:897)
    public void remName(){
         rem(MetaDMSAG.__name);
    }

    /**
     * @return An Iterator of GpbEnumValue objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1112)
    public Iterator<GpbEnumValue> getGpbEnumValue(){
        DmcTypeGpbEnumValueMV attr = (DmcTypeGpbEnumValueMV) get(DmdgpbDMSAG.__gpbEnumValue);
        if (attr == null)
            return( ((List<GpbEnumValue>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth GpbEnumValue value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1124)
    public GpbEnumValue getNthGpbEnumValue(int i){
        DmcTypeGpbEnumValueMV attr = (DmcTypeGpbEnumValueMV) get(DmdgpbDMSAG.__gpbEnumValue);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another gpbEnumValue to the specified value.
     * @param value GpbEnumValue
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1138)
    public DmcAttribute<?> addGpbEnumValue(GpbEnumValue value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__gpbEnumValue);
        if (attr == null)
            attr = new DmcTypeGpbEnumValueMV(DmdgpbDMSAG.__gpbEnumValue);
        
        try{
            setLastValue(attr.add(value));
            add(DmdgpbDMSAG.__gpbEnumValue,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified GpbEnumValue.
     * @param value GpbEnumValue
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1213)
    public boolean gpbEnumValueContains(GpbEnumValue value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__gpbEnumValue);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another gpbEnumValue value.
     * @param value A value compatible with GpbEnumValue
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1245)
    public DmcAttribute<?> addGpbEnumValue(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__gpbEnumValue);
        if (attr == null)
            attr = new DmcTypeGpbEnumValueMV(DmdgpbDMSAG.__gpbEnumValue);
        
        setLastValue(attr.add(value));
        add(DmdgpbDMSAG.__gpbEnumValue,attr);
        return(attr);
    }

    /**
     * Returns the number of values in gpbEnumValue
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1262)
    public int getGpbEnumValueSize(){
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__gpbEnumValue);
        if (attr == null){
            if (DmdgpbDMSAG.__gpbEnumValue.indexSize == 0)
                return(0);
            else
                return(DmdgpbDMSAG.__gpbEnumValue.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a gpbEnumValue value.
     * @param value The GpbEnumValue to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1320)
    public DmcAttribute<?> delGpbEnumValue(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__gpbEnumValue);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeGpbEnumValueMV(DmdgpbDMSAG.__gpbEnumValue), value);
        else
            attr = del(DmdgpbDMSAG.__gpbEnumValue, value);
        
        return(attr);
    }

    /**
     * Deletes a gpbEnumValue from the specified value.
     * @param value GpbEnumValue
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1336)
    public DmcAttribute<?> delGpbEnumValue(GpbEnumValue value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__gpbEnumValue);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeGpbEnumValueMV(DmdgpbDMSAG.__gpbEnumValue), value);
        else
            attr = del(DmdgpbDMSAG.__gpbEnumValue, value);
        
        return(attr);
    }

    /**
     * Removes the gpbEnumValue attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1355)
    public void remGpbEnumValue(){
         rem(DmdgpbDMSAG.__gpbEnumValue);
    }




}
