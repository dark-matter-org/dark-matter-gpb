//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2011 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.gpb.shared.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:393)
import java.io.Serializable;                                                  // Always required - (GenUtility.java:221)
import java.util.*;                                                           // Always required if we have any MV attributes - (GenUtility.java:216)
import org.dmd.dmc.DmcAttribute;                                              // Named object - (GenUtility.java:373)
import org.dmd.dmc.DmcNamedObjectIF;                                          // Named object - (GenUtility.java:372)
import org.dmd.dmc.DmcOmni;                                                   // Lazy resolution - (GenUtility.java:317)
import org.dmd.dmc.DmcSliceInfo;                                              // Required for object slicing - (GenUtility.java:226)
import org.dmd.dmc.DmcValueException;                                         // Any attributes - (GenUtility.java:238)
import org.dmd.dmc.types.DefinitionName;                                      // Naming attribute type - (GenUtility.java:367)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                   // Required for MODREC constructor - (GenUtility.java:225)
import org.dmd.dms.generated.types.DmcTypeDefinitionNameSV;                   // Required type - (GenUtility.java:325)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                         // Required for MODREC constructor - (GenUtility.java:224)
import org.dmd.dms.generated.types.DmcTypeStringSV;                           // Required type - (GenUtility.java:325)
import org.dmd.gpb.shared.generated.dmo.GpbDefinitionDMO;                     // Base class - (GenUtility.java:352)
import org.dmd.gpb.shared.generated.dmo.GpbMainElementDMO;                    // Type specific set/add - (GenUtility.java:304)
import org.dmd.gpb.shared.generated.types.DmcTypeGpbMainElementREFMV;         // Reference type - (GenUtility.java:297)
import org.dmd.gpb.shared.generated.types.GpbMainElementREF;                  // Helper class - (GenUtility.java:332)

/**
 * The GpbProtoFile is used to represent a single .proto file.
 * <P>
 * Generated from the dmdgpb schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class GpbProtoFileDMO  extends GpbDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "GpbProtoFile";


    static {
    }

    public GpbProtoFileDMO() {
        super("GpbProtoFile");
    }

    protected GpbProtoFileDMO(String oc) {
        super(oc);
    }

    @Override
    public GpbProtoFileDMO getNew(){
        GpbProtoFileDMO rc = new GpbProtoFileDMO();
        return(rc);
    }

    @Override
    public GpbProtoFileDMO getSlice(DmcSliceInfo info){
        GpbProtoFileDMO rc = new GpbProtoFileDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public GpbProtoFileDMO(DmcTypeModifierMV mods) {
        super("GpbProtoFile");
        modrec(true);
        setModifier(mods);
    }

    public GpbProtoFileDMO getModificationRecorder(){
        GpbProtoFileDMO rc = new GpbProtoFileDMO();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:750)
    public DefinitionName getObjectName(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null)
            return((DefinitionName)name.getSV());
    
        return(null);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:767)
    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return(name);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:774)
    public boolean equals(Object obj){
        if (obj instanceof GpbProtoFileDMO){
            return( getObjectName().equals( ((GpbProtoFileDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:782)
    public int hashCode(){
        DefinitionName objn = getObjectName();
        if (objn == null)
            return(0);
        
        return(objn.hashCode());
    }

    /**
     * @return An Iterator of GpbMainElementDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:967)
    public Iterator<GpbMainElementREF> getMainElements(){
        DmcTypeGpbMainElementREFMV attr = (DmcTypeGpbMainElementREFMV) get(DmdgpbDMSAG.__mainElements);
        if (attr == null)
            return( ((List<GpbMainElementREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<GpbMainElementREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of GpbMainElementREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:987)
    public Iterator<GpbMainElementREF> getMainElementsREFs(){
        DmcTypeGpbMainElementREFMV attr = (DmcTypeGpbMainElementREFMV) get(DmdgpbDMSAG.__mainElements);
        if (attr == null)
            return( ((List<GpbMainElementREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another mainElements to the specified value.
     * @param value GpbMainElement
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1001)
    public DmcAttribute<?> addMainElements(GpbMainElementDMO value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__mainElements);
        if (attr == null)
            attr = new DmcTypeGpbMainElementREFMV(DmdgpbDMSAG.__mainElements);
        
        try{
            setLastValue(attr.add(value));
            add(DmdgpbDMSAG.__mainElements,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another mainElements value.
     * @param value A value compatible with GpbMainElement
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1242)
    public DmcAttribute<?> addMainElements(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__mainElements);
        if (attr == null)
            attr = new DmcTypeGpbMainElementREFMV(DmdgpbDMSAG.__mainElements);
        
        setLastValue(attr.add(value));
        add(DmdgpbDMSAG.__mainElements,attr);
        return(attr);
    }

    /**
     * Returns the number of values in mainElements
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1259)
    public int getMainElementsSize(){
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__mainElements);
        if (attr == null){
            if (DmdgpbDMSAG.__mainElements.indexSize == 0)
                return(0);
            else
                return(DmdgpbDMSAG.__mainElements.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a mainElements value.
     * @param value The GpbMainElement to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1298)
    public DmcAttribute<?> delMainElements(Object value){
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__mainElements);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeGpbMainElementREFMV(DmdgpbDMSAG.__mainElements), value);
        else
            attr = del(DmdgpbDMSAG.__mainElements, value);
        
        return(attr);
    }

    /**
     * Removes the mainElements attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1352)
    public void remMainElements(){
         rem(DmdgpbDMSAG.__mainElements);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:781)
    public DefinitionName getName(){
        DmcTypeDefinitionNameSV attr = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:821)
    public void setName(DefinitionName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:874)
    public void setName(Object value) throws DmcValueException {
        DmcTypeDefinitionNameSV attr  = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:894)
    public void remName(){
         rem(MetaDMSAG.__name);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:781)
    public String getPackage(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmdgpbDMSAG.__package);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets package to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:821)
    public void setPackage(String value) {
        DmcAttribute<?> attr = get(DmdgpbDMSAG.__package);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__package);
        
        try{
            attr.set(value);
            set(DmdgpbDMSAG.__package,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets package to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:874)
    public void setPackage(Object value) throws DmcValueException {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmdgpbDMSAG.__package);
        if (attr == null)
            attr = new DmcTypeStringSV(DmdgpbDMSAG.__package);
        
        attr.set(value);
        set(DmdgpbDMSAG.__package,attr);
    }

    /**
     * Removes the package attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:894)
    public void remPackage(){
         rem(DmdgpbDMSAG.__package);
    }




}
